// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyteadmin/pkg/workflowengine/k8sexecutor/interfaces"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// K8sWorkflowExecutor is an autogenerated mock type for the K8sWorkflowExecutor type
type K8sWorkflowExecutor struct {
	mock.Mock
}

type K8sWorkflowExecutor_Abort struct {
	*mock.Call
}

func (_m K8sWorkflowExecutor_Abort) Return(_a0 error) *K8sWorkflowExecutor_Abort {
	return &K8sWorkflowExecutor_Abort{Call: _m.Call.Return(_a0)}
}

func (_m *K8sWorkflowExecutor) OnAbort(ctx context.Context, data interfaces.AbortData) *K8sWorkflowExecutor_Abort {
	c := _m.On("Abort", ctx, data)
	return &K8sWorkflowExecutor_Abort{Call: c}
}

func (_m *K8sWorkflowExecutor) OnAbortMatch(matchers ...interface{}) *K8sWorkflowExecutor_Abort {
	c := _m.On("Abort", matchers...)
	return &K8sWorkflowExecutor_Abort{Call: c}
}

// Abort provides a mock function with given fields: ctx, data
func (_m *K8sWorkflowExecutor) Abort(ctx context.Context, data interfaces.AbortData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.AbortData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type K8sWorkflowExecutor_Execute struct {
	*mock.Call
}

func (_m K8sWorkflowExecutor_Execute) Return(_a0 interfaces.ExecutionResponse, _a1 error) *K8sWorkflowExecutor_Execute {
	return &K8sWorkflowExecutor_Execute{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *K8sWorkflowExecutor) OnExecute(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, data interfaces.ExecutionData) *K8sWorkflowExecutor_Execute {
	c := _m.On("Execute", ctx, workflow, data)
	return &K8sWorkflowExecutor_Execute{Call: c}
}

func (_m *K8sWorkflowExecutor) OnExecuteMatch(matchers ...interface{}) *K8sWorkflowExecutor_Execute {
	c := _m.On("Execute", matchers...)
	return &K8sWorkflowExecutor_Execute{Call: c}
}

// Execute provides a mock function with given fields: ctx, workflow, data
func (_m *K8sWorkflowExecutor) Execute(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, data interfaces.ExecutionData) (interfaces.ExecutionResponse, error) {
	ret := _m.Called(ctx, workflow, data)

	var r0 interfaces.ExecutionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow, interfaces.ExecutionData) interfaces.ExecutionResponse); ok {
		r0 = rf(ctx, workflow, data)
	} else {
		r0 = ret.Get(0).(interfaces.ExecutionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.FlyteWorkflow, interfaces.ExecutionData) error); ok {
		r1 = rf(ctx, workflow, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type K8sWorkflowExecutor_ID struct {
	*mock.Call
}

func (_m K8sWorkflowExecutor_ID) Return(_a0 string) *K8sWorkflowExecutor_ID {
	return &K8sWorkflowExecutor_ID{Call: _m.Call.Return(_a0)}
}

func (_m *K8sWorkflowExecutor) OnID() *K8sWorkflowExecutor_ID {
	c := _m.On("ID")
	return &K8sWorkflowExecutor_ID{Call: c}
}

func (_m *K8sWorkflowExecutor) OnIDMatch(matchers ...interface{}) *K8sWorkflowExecutor_ID {
	c := _m.On("ID", matchers...)
	return &K8sWorkflowExecutor_ID{Call: c}
}

// ID provides a mock function with given fields:
func (_m *K8sWorkflowExecutor) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
