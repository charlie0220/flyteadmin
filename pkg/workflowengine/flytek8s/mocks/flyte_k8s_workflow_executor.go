// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	flytek8s "github.com/flyteorg/flyteadmin/pkg/workflowengine/flytek8s"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// FlyteK8sWorkflowExecutor is an autogenerated mock type for the FlyteK8sWorkflowExecutor type
type FlyteK8sWorkflowExecutor struct {
	mock.Mock
}

// Abort provides a mock function with given fields: ctx, data
func (_m *FlyteK8sWorkflowExecutor) Abort(ctx context.Context, data flytek8s.AbortData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, flytek8s.AbortData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: ctx, workflow, data
func (_m *FlyteK8sWorkflowExecutor) Execute(ctx context.Context, workflow *v1alpha1.FlyteWorkflow, data flytek8s.ExecutionData) (flytek8s.ExecutionResponse, error) {
	ret := _m.Called(ctx, workflow, data)

	var r0 flytek8s.ExecutionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow, flytek8s.ExecutionData) flytek8s.ExecutionResponse); ok {
		r0 = rf(ctx, workflow, data)
	} else {
		r0 = ret.Get(0).(flytek8s.ExecutionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.FlyteWorkflow, flytek8s.ExecutionData) error); ok {
		r1 = rf(ctx, workflow, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
